# scanner/scanner.py
# –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π

import asyncio
import requests
import re
from urllib.parse import urljoin, parse_qs, urlparse, urlencode
from bs4 import BeautifulSoup
from concurrent.futures import ThreadPoolExecutor, as_completed
import logging

from .crawler import Crawler
from .checkers import (XSSChecker, SQLIChecker, PathTraversalChecker, OSCommandChecker, SSRFChecker,
                      LFIRFIChecker, HPPChecker, OpenRedirectChecker)
from .payloads import (HEADERS, ERROR_SIGS_SQL, ERROR_SIGS_PATH, ERROR_SIGS_OS, ERROR_SIGS_LFI,
                      FUZZ_PARAMS, HEADER_FUZZ_PAYLOADS, SEVERITY_MAP)
from .utils import rand_tag, detect_cms, get_cms_version

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class VulnResult(dict):
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
    __getattr__ = dict.__getitem__

class VulnerabilityScanner:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""

    def __init__(self, base_url: str, progress_cb=None, threads: int = 10):
        # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.base = base_url.rstrip('/')
        # HTTP-—Å–µ—Å—Å–∏—è
        self.session = requests.Session()
        self.session.headers.update(HEADERS)
        # Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_cb = progress_cb or (lambda _: {})
        # –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.executor = ThreadPoolExecutor(max_workers=threads)
        # –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        self.vulns: list[VulnResult] = []
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CMS
        self.cms_info = {"cms": None, "version": None}
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        self.checkers = [
            XSSChecker(self.session),
            SQLIChecker(self.session),
            PathTraversalChecker(self.session),
            OSCommandChecker(self.session),
            SSRFChecker(self.session),
            LFIRFIChecker(self.session),
            HPPChecker(self.session),
            OpenRedirectChecker(self.session),
        ]
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å–∫–∞–Ω–µ—Ä –¥–ª—è {self.base} —Å {threads} –ø–æ—Ç–æ–∫–∞–º–∏")

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self._update("üîç –ö—Ä–∞—É–ª–∏–Ω–≥ —Ü–µ–ª–∏...", 0, 1)
        logger.info("–ó–∞–ø—É—Å–∫ –∫—Ä–∞—É–ª–∏–Ω–≥–∞")
        crawler = Crawler(self.base)
        pages = await crawler.crawl()
        logger.info(f"–ö—Ä–∞—É–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü")

        # –î–µ—Ç–µ–∫—Ü–∏—è CMS
        self._update("üîé –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ CMS...", 1, 2)
        logger.info("–î–µ—Ç–µ–∫—Ü–∏—è CMS")
        cms = detect_cms(self.session, self.base)
        if cms:
            version = get_cms_version(self.session, self.base, cms)
            self.cms_info = {"cms": cms, "version": version}
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω CMS: {cms} (–≤–µ—Ä—Å–∏—è: {version})")
        else:
            self.cms_info = {"cms": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ", "version": "N/A"}
            logger.info("CMS –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")

        forms_total = sum(len(s.find_all("form")) for _, s in pages)
        self.total = forms_total + 10  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
        current = 0
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {forms_total} —Ñ–æ—Ä–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º
        futures = []
        for url, soup in pages:
            for form in soup.find_all("form"):
                futures.append(self.executor.submit(self._test_form, url, form, soup))
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ {len(futures)} –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º")
        for fut in as_completed(futures):
            try:
                vulns = fut.result()
                if vulns:
                    self.vulns.extend([v for v in vulns if v['payload']])  # –ò—Å–∫–ª—é—á–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–µ–π–ª–æ–∞–¥—ã
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏: {len(vulns)}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã: {e}")
            current += 1
            self._update(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–æ—Ä–º: {current}/{forms_total}", current, self.total)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ CSRF
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ CSRF")
        for url, soup in pages:
            csrf_vulns = self._check_csrf_forms(url, soup)
            self.vulns.extend([v for v in csrf_vulns if v['payload']])
            if csrf_vulns:
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã CSRF —É—è–∑–≤–∏–º–æ—Å—Ç–∏: {len(csrf_vulns)}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ IDOR
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ IDOR")
        idor_vulns = self._check_idor(pages)
        self.vulns.extend([v for v in idor_vulns if v['payload']])
        if idor_vulns:
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã IDOR —É—è–∑–≤–∏–º–æ—Å—Ç–∏: {len(idor_vulns)}")

        self._update("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", self.total, self.total, done=True)
        logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ {len(self.vulns)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
        return self.vulns

    def get_cms_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CMS"""
        return self.cms_info

    def _test_form(self, page_url: str, form, soup: BeautifulSoup):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã –Ω–∞ {page_url}")
        action = form.get("action") or page_url
        method = (form.get("method") or "get").lower()
        target = urljoin(page_url, action)
        inputs = form.find_all(["input", "textarea", "select"])
        form_data = {i.get("name") or rand_tag(): "test" for i in inputs if i.get("name")}
        vulns: list[VulnResult] = []
        for chk in self.checkers:
            vulns.extend(chk.test(target, form_data, method))
        vulns.extend(self._generic_fuzz(target, form_data, method))
        vulns.extend(self._context_aware_fuzz(target, form_data, method, soup))
        vulns.extend(self._header_fuzz(target, form_data, method))
        return [v for v in vulns if v['payload']]

    def _generic_fuzz(self, url: str, data: dict[str, str], method: str):
        """–û–±—â–∏–π —Ñ–∞–∑–∑–∏–Ω–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        vulns: list[VulnResult] = []
        for p in data:
            for fz in FUZZ_PARAMS:
                mod = data.copy()
                mod[p] = fz
                r = None
                try:
                    if method == "post":
                        r = self.session.post(url, data=mod, headers=HEADERS, timeout=8)
                    else:
                        r = self.session.get(url, params=mod, headers=HEADERS, timeout=8)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∞–∑–∑–∏–Ω–≥–µ {url}: {e}")
                    continue
                if not r:
                    continue
                t = r.text.lower()
                if any(s.lower() in t for s in ERROR_SIGS_SQL) and mod[p] != "test":
                    vulns.append(VulnResult(type="SQL Injection (fuzz)", url=url, method=method.upper(),
                                            payload=mod, severity=SEVERITY_MAP["SQL Injection (fuzz)"]))
                if any(s.lower() in t for s in ERROR_SIGS_PATH) and mod[p] != "test":
                    vulns.append(VulnResult(type="Path Traversal (fuzz)", url=url, method=method.upper(),
                                            payload=mod, severity=SEVERITY_MAP["Path Traversal (fuzz)"]))
                if "window.xssflag" in t and mod[p] != "test":
                    vulns.append(VulnResult(type="XSS (fuzz)", url=url, method=method.upper(),
                                            payload=mod, severity=SEVERITY_MAP["XSS"]))
                if any(s.lower() in t for s in ERROR_SIGS_OS) and mod[p] != "test":
                    vulns.append(VulnResult(type="OS Command Injection (fuzz)", url=url, method=method.upper(),
                                            payload=mod, severity=SEVERITY_MAP["OS Command Injection (fuzz)"]))
                if any(s.lower() in t for s in ERROR_SIGS_LFI) and mod[p] != "test":
                    vulns.append(VulnResult(type="LFI/RFI (fuzz)", url=url, method=method.upper(),
                                            payload=mod, severity=SEVERITY_MAP["LFI/RFI"]))
        return vulns

    def _context_aware_fuzz(self, url: str, data: dict[str, str], method: str, soup: BeautifulSoup):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–π —Ñ–∞–∑–∑–∏–Ω–≥ –¥–ª—è XSS"""
        vulns: list[VulnResult] = []
        for tag in soup.find_all(True):
            for attr, value in tag.attrs.items():
                if attr in ["href", "src", "action"]:
                    payload = "javascript:window.xssFlag=1"
                elif attr.startswith("on"):
                    payload = "window.xssFlag=1"
                else:
                    continue
                test_data = data.copy()
                for k in test_data:
                    test_data[k] = payload
                r = None
                try:
                    if method == "post":
                        r = self.session.post(url, data=test_data, headers=HEADERS, timeout=8)
                    else:
                        r = self.session.get(url, params=test_data, headers=HEADERS, timeout=8)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º —Ñ–∞–∑–∑–∏–Ω–≥–µ {url}: {e}")
                    continue
                if r and "window.xssFlag" in r.text.lower() and any(test_data.values()) != "test":
                    vulns.append(VulnResult(type="XSS (context-aware)", url=url, method=method.upper(),
                                            payload=test_data, severity=SEVERITY_MAP["XSS"]))
        return vulns

    def _header_fuzz(self, url: str, data: dict[str, str], method: str):
        """–§–∞–∑–∑–∏–Ω–≥ HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        vulns: list[VulnResult] = []
        for header in ["Referer", "Cookie"]:
            for payload in HEADER_FUZZ_PAYLOADS:
                mod_headers = HEADERS.copy()
                mod_headers[header] = payload
                r = None
                try:
                    if method == "post":
                        r = self.session.post(url, data=data, headers=mod_headers, timeout=8)
                    else:
                        r = self.session.get(url, params=data, headers=mod_headers, timeout=8)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∞–∑–∑–∏–Ω–≥–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ {url}: {e}")
                    continue
                if not r:
                    continue
                t = r.text.lower()
                if "window.xssflag" in t and payload != "test":
                    vulns.append(VulnResult(type="XSS (header fuzz)", url=url, method=method.upper(),
                                            payload={header: payload}, severity=SEVERITY_MAP["XSS"]))
                if any(s.lower() in t for s in ERROR_SIGS_SQL) and payload != "test":
                    vulns.append(VulnResult(type="SQL Injection (header fuzz)", url=url, method=method.upper(),
                                            payload={header: payload}, severity=SEVERITY_MAP["SQL Injection (fuzz)"]))
                if any(s.lower() in t for s in ERROR_SIGS_LFI) and payload != "test":
                    vulns.append(VulnResult(type="LFI/RFI (header fuzz)", url=url, method=method.upper(),
                                            payload={header: payload}, severity=SEVERITY_MAP["LFI/RFI"]))
        return vulns

    def _check_csrf_forms(self, url: str, soup: BeautifulSoup):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ CSRF"""
        vulns: list[VulnResult] = []
        forms = soup.find_all("form")
        for f in forms:
            method = (f.get("method") or "get").lower()
            if method == "get":
                continue
            has_token = any(
                (i.get("type") == "hidden" and re.search(r"csrf|token", i.get("name", ""), re.I))
                for i in f.find_all("input")
            )
            if not has_token:
                vulns.append(VulnResult(type="CSRF", url=url, method=method.upper(),
                                        payload={}, severity=SEVERITY_MAP["CSRF"]))
        return [v for v in vulns if v['payload']]

    def _check_idor(self, pages: list[tuple[str, BeautifulSoup]]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ IDOR –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö URL"""
        vulns: list[VulnResult] = []
        for url, _ in pages:
            qs = parse_qs(urlparse(url).query)
            for param, vals in qs.items():
                val = vals[0]
                if val.isdigit():
                    new_val = str(int(val) + 1)
                    new_qs = qs.copy()
                    new_qs[param] = [new_val]
                    new_url = url.split("?")[0] + "?" + urlencode({k: v[0] for k, v in new_qs.items()})
                    try:
                        orig = self.session.get(url, headers=HEADERS, timeout=8)
                        mutated = self.session.get(new_url, headers=HEADERS, timeout=8)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IDOR {new_url}: {e}")
                        continue
                    if orig.status_code == mutated.status_code == 200 and orig.text != mutated.text:
                        vulns.append(VulnResult(type="IDOR", url=new_url, method="GET",
                                                payload={param: new_val}, severity=SEVERITY_MAP["IDOR"]))
        return [v for v in vulns if v['payload']]

    def _update(self, msg: str, cur: int, total: int, done: bool = False):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.progress_cb({"message": msg, "current": cur, "total": total or 1, "done": done})